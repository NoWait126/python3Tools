一 并发 并行 同步 异步 阻塞 非阻塞的基本特点

并发：在一个时间段内，同一个CPU上有n个程序运行，某个时间点只有一个

并行：在任意时间点上，n个CPU上面有n个程序同时运行

同步：程序调用IO操作的时候，必须等到IO完成才返回

异步：程序调用IO操作的时候，不必等待IO完成后就返回

阻塞：函数调用的时候挂起当前的线程

非阻塞：函数调用的时候不挂起当前线程，立刻返回



二 Unit五种IO模型阻塞式

阻塞式、非阻塞式、IO复用、异步IO、信号驱动（这种使用非常少此处不做解析）

1 阻塞式

  应用进程                           内核

    |recvfrom --------系统调用-------- > 无数据
    |                                  |
    |                                  | 等待
    |                                  |
    |                                  | 数据
    |                                  |
    |                                  |
    |                               数据准备好
    |                                复制数据
    |                                  |
    |                                  |
    |                                  | 复制数据
    |                                  | 到用户空间
    |                                  |
    |                                  |
    |处理数据 <-------返回成功提示------- 复制完成


2 非阻塞式，一直轮番查询是否有数据返回

  应用进程                           内核

    |recvfrom --------系统调用-------- > 无数据
    |         <-------no data-------   |
    |recvfrom -----------------------> |
    |         <-------no data--------  |
    |                    ...           |
    |                                  |
    |                                  |
    |          -------------------> 数据准备好
    |                                复制数据
    |                                  |
    |                                  |
    |                                  | 复制数据
    |                                  | 到用户空间
    |                                  |
    |                                  |
    |处理数据 <-------返回成功提示------- 复制完成


3 IO复用，目前大部分并发框架都是使用这种，这种方式调用select后其实也是阻塞了，但是这个和阻塞式IO的区别在于，select可以同时监听多个socket，任何一个返回True的话就可以立刻处理

  应用进程                           内核

    |select   --------系统调用-------- > 无数据
    |                                  |
    |                                  |
    |                                  |
    |                                  |
    |                                  |
    |                                  |
    |         <-----返回可读条件------  数据准备好
    |recvfrom ------------------->  复制数据
    |                                  |
    |                                  |
    |                                  | 复制数据
    |                                  | 到用户空间
    |                                  |
    |                                  |
    |处理数据 <-------返回成功提示------- 复制完成


4 异步IO

  应用进程                           内核

    |aio.read --------系统调用-------- > 无数据
    |         <-------return--------   |
    |                                  |
    |                                  |
    |                                  |
    |                                  |
    |                                  |
    |                               数据准备好
    |                               复制数据
    |                                  |
    |                                  |
    |                                  | 复制数据
    |                                  | 到用户空间
    |                                  |
    |                                  |
    |处理数据<--递交aio.read中指定的信号-- 复制完成


三 IO多路复用

基本含义：一个进程可以监视多个描述符，一旦某个就绪的话就通知程序进行相应的读写操作